#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May  6 15:09:19 2019

@author: yating
"""

import xml.etree.ElementTree as ET
import random
from IPython import get_ipython
from random import shuffle
import sys
import textwrap as tw
from StigSim import StigSim
import matplotlib.pyplot as plt
import networkx as nx  
import matplotlib.cm as cmx
import matplotlib.colors as colors
import os
import json 
import numpy as np

#import and analyze data generated by Ga
def AnalyzeData(json_filename):
    with open(json_filename) as f:
         generation = json.load(f)
         result_data=[]
         result=[]
         for pop_dict in range(0,100): 
             for DNA_index in range(0,100):
                 result_data.append(generation[str(pop_dict)][DNA_index].split())
                 for individual in range(0,20):
                     element=result_data[DNA_index][individual]
                     element=element.replace('[','')
                     element=element.replace(']','')
                     result_data[DNA_index][individual]=float(element)
             result.append(result_data)
             result_data=[]
    return result

#calculate the finess by measure the world
def MeasureWorld(world):
    
    length=[]
    condition1=(world-2)==0
    condition2=(world-3)==0
    count1=world[condition1]
    count2=world[condition2]
    length=len(count1)+len(count2)
    return length

def CalculateFitness(result):
    fitness_record=[]
    for Gen_index in range(len(result)):
        DNA=result[Gen_index]
        parameters=[]
        length=[]
        fitness=[]
        for chromsome in range(len(DNA)):
            parameters=DNA[chromsome] 
            ex_config_file_path="configuration.xml"
            tree = ET.parse(ex_config_file_path)
            root = tree.getroot() 
            subnode=tree.findall("objects/object/rules/rule/actions")
            index=0
            for node in subnode:
                node.set('p',str(parameters[index]))
                index=index+1                         
            et = ET.ElementTree(root)  
            et.write("configuration.xml", encoding="utf-8", xml_declaration=True, short_empty_elements=False)
            simulator= StigSim("configuration.xml")
            world=simulator.world_record[99]
#            simulator.run(str(chromsome))
            simulator.run()
            length=MeasureWorld(world)
            fitness.append(length)
        fitness_record.append(fitness)
    return fitness_record
#fitness=CalculateFitness(result)
    
#draw fitness curves
def PltFitness(fitness):  
    Meanfitness=[]
    Meanfitness=np.mean(fitness,axis=1)
    gen=np.linspace(1,100,100)     
    plt.figure()
    plt.ylim(0,100)
    plt.plot(gen,Meanfitness,c='red', alpha=0.5,label='Meanfitness')
    plt.legend()
    plt.xlabel("Generations")
    plt.ylabel("Mean value of fitness")
    plt.show()
    plt.savefig("fitness.png")  
 
# pick up specific DNA, record the rules excuted by two robots
def RecordSimulation(DNA):
    parameters=[]
    for chromsome in range(len(DNA)):
        parameters=DNA[chromsome] 
        ex_config_file_path="configuration.xml"
        tree = ET.parse(ex_config_file_path)
        root = tree.getroot() 
        subnode=tree.findall("objects/object/rules/rule/actions")
        index=0
        for node in subnode:
            node.set('p',str(parameters[index]))
            index=index+1                         
        et = ET.ElementTree(root)  
        et.write("configuration.xml", encoding="utf-8", xml_declaration=True, short_empty_elements=False)
        simulator= StigSim("configuration.xml")
        simulator.run(str(chromsome))
        


def MeasureEdge(robot_node):
        Num_edge=[]
        weight=[]
        for i in range(0,len(robot_node)):
            count=0
            for j in range(0,len(robot_node)):
                if robot_node[i]==robot_node[j]:
                    count=count+1
            Num_edge.append((count,))
            weight.append(count)
        return Num_edge, weight
    
def AbstractRobotNodes(json_filename):
    R1=[]
    R2=[]
    R=[]
    robot_node=[] 
    with open(json_filename) as f:
         pop_data = json.load(f)
         for pop_dict in pop_data: 
             for index in pop_data[str(pop_dict)]['1']:
                 if pop_data[str(pop_dict)]['1'][index]==True:
                     R1.append(index)
             for index in pop_data[str(pop_dict)]['2']:
                 if pop_data[str(pop_dict)]['2'][index]==True:
                     R2.append(index)
    R.append(R1)
    R.append(R2)                 
    for i in range(0,len(R1)-1):    
        robot_node.append((R1[i],R1[i+1]))
        robot_node.append((R2[i],R2[i+1]))   
    Num_edge,weight=MeasureEdge(robot_node)      
    for i_ in range(len(robot_node)):
        robot_node[i_]=robot_node[i_]+Num_edge[i_]
    return robot_node

def DirecredNetworkxDraw(robot_node,index):
    weight=[]
    DirectNetwork=[]
    colorlist=[]
    Sort_robot_node=sorted(robot_node,key=lambda s:s[2])
    for item in Sort_robot_node:
        if item not in DirectNetwork:
            DirectNetwork.append(item)
            weight.append(item[2])
    for i in range(len(weight)):
        colorlist.append((0,0.11,1,1))   
        
    DG=nx.DiGraph()
    DG.add_weighted_edges_from(DirectNetwork)   
    num_edges=DG.number_of_edges()
    edge_alphas=[((i+6)/(6+max(weight))) for i in weight] 
    pos=nx.shell_layout(DG)
    node_size=300
    plt.figure(index)
    nx.draw_networkx_nodes(DG,pos,node_color='r',node_size=node_size)
    nx.draw_networkx_labels(DG,pos,with_labels=True)
    edges=nx.draw_networkx_edges(DG,pos,node_size=node_size, arrowstyle='->',edge_color=colorlist,edge_cmap=plt.cm.Blues,width=2)
    for i in range(num_edges):
        edges[i].set_alpha(edge_alphas[i])
    ax = plt.gca()
    ax.set_axis_off()
#    plt.show()
    plt.savefig('pagerank'+str(index)+'.png')      
for index in range(len(DNA)):
    json_filename='/home/yating/Workspace/ParametersTraining/Two Sensors/'+str(index)+'/report.json'
    robot_node=AbstractRobotNodes(json_filename)
    DirecredNetworkxDraw(robot_node,index)    


json_filename = '/home/yating/Workspace/ParametersTraining/Two Sensors/results2/results.json'    
result=AnalyzeData(json_filename)
fitness=CalculateFitness(result)
DNA=[]
for i in range(89,99):
    DNA.append(np.array(result[99][i][0:20]))
    
RecordSimulation(DNA)   

for index in range(len(DNA)):
    json_filename='/home/yating/Workspace/ParametersTraining/Two Sensors/'+str(index)+'/report.json'
    robot_node=AbstractRobotNodes(json_filename)
    DirecredNetworkxDraw(robot_node,index)